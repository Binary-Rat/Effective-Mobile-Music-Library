basePath: /
definitions:
  appErr.Error:
    properties:
      message:
        type: string
    type: object
  models.Song:
    properties:
      details:
        $ref: '#/definitions/models.SongDetails'
      group:
        example: group
        type: string
      song:
        example: song
        type: string
    type: object
  models.SongDTO:
    properties:
      details:
        $ref: '#/definitions/models.SongDetails'
      group:
        type: string
      id:
        type: integer
      song:
        type: string
    type: object
  models.SongDetails:
    properties:
      link:
        example: link
        type: string
      releaseDate:
        type: string
      text:
        example: lyrics
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /music:
    delete:
      description: Удаление песни по идентификатору
      parameters:
      - description: Идентификатор песни
        example: 1
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Song deleted
          schema:
            type: string
        "400":
          description: Ошибка запроса
          schema:
            $ref: '#/definitions/appErr.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/appErr.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/appErr.Error'
      summary: Delete a song
      tags:
      - Songs
    get:
      description: Получение списка песен с возможностью фильтрации, пагинации и сортировки
      parameters:
      - description: Фильтр по идентификатору
        in: query
        name: id
        type: integer
      - description: Фильтр по группе
        example: Nirvana
        in: query
        name: group
        type: string
      - description: Фильтр по названию песни
        example: Lithium
        in: query
        name: song
        type: string
      - default: 0
        description: Номер отступа для пагинации
        example: 0
        in: query
        name: offset
        type: integer
      - default: 10
        description: Максимальное количество записей
        example: 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список песен
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
        "400":
          description: Ошибка запроса
          schema:
            $ref: '#/definitions/appErr.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/appErr.Error'
      summary: Get songs
      tags:
      - Songs
    patch:
      consumes:
      - application/json
      description: Изменение данных песни. Песня определяется по переданному в структуре
        id.
      parameters:
      - description: Данные для изменения песни
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.SongDTO'
      produces:
      - application/json
      responses:
        "200":
          description: 'Song changed with id: {id}'
          schema:
            type: string
        "400":
          description: Ошибка запроса
          schema:
            $ref: '#/definitions/appErr.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/appErr.Error'
        "422":
          description: Невалидные данные
          schema:
            $ref: '#/definitions/appErr.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/appErr.Error'
      summary: Change a song
      tags:
      - Songs
    post:
      consumes:
      - application/json
      description: Добавление новой песни
      parameters:
      - description: Данные новой песни
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/models.Song'
      produces:
      - application/json
      responses:
        "201":
          description: 'Song added with id: {id}'
          schema:
            type: string
        "400":
          description: Ошибка запроса
          schema:
            $ref: '#/definitions/appErr.Error'
        "422":
          description: Невалидные данные
          schema:
            $ref: '#/definitions/appErr.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/appErr.Error'
      summary: Add a song
      tags:
      - Songs
  /music/{id}/verse:
    get:
      description: Получение куплетов песни по идентификатору
      parameters:
      - description: Идентификатор песни
        in: path
        name: id
        required: true
        type: integer
      - default: 0
        description: Отступ для пагинации
        in: query
        name: offset
        type: integer
      - default: 10
        description: Максимальное количество записей
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Список куплетов
          schema:
            items:
              type: string
            type: array
        "400":
          description: Ошибка запроса
          schema:
            $ref: '#/definitions/appErr.Error'
        "404":
          description: Песня не найдена
          schema:
            $ref: '#/definitions/appErr.Error'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/appErr.Error'
      summary: Get song verses
      tags:
      - Verses
swagger: "2.0"
