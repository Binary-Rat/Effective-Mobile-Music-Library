// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "Effective-Mobile-Music-Library/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// AddSong mocks base method.
func (m *MockInterface) AddSong(ctx context.Context, song models.Song) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSong", ctx, song)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSong indicates an expected call of AddSong.
func (mr *MockInterfaceMockRecorder) AddSong(ctx, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSong", reflect.TypeOf((*MockInterface)(nil).AddSong), ctx, song)
}

// ChangeSong mocks base method.
func (m *MockInterface) ChangeSong() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSong")
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSong indicates an expected call of ChangeSong.
func (mr *MockInterfaceMockRecorder) ChangeSong() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSong", reflect.TypeOf((*MockInterface)(nil).ChangeSong))
}

// Delete mocks base method.
func (m *MockInterface) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInterfaceMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInterface)(nil).Delete))
}

// Songs mocks base method.
func (m *MockInterface) Songs(arg0 context.Context, arg1 models.Song) ([]models.SongDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Songs", arg0, arg1)
	ret0, _ := ret[0].([]models.SongDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Songs indicates an expected call of Songs.
func (mr *MockInterfaceMockRecorder) Songs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Songs", reflect.TypeOf((*MockInterface)(nil).Songs), arg0, arg1)
}

// Text mocks base method.
func (m *MockInterface) Text() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Text")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Text indicates an expected call of Text.
func (mr *MockInterfaceMockRecorder) Text() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Text", reflect.TypeOf((*MockInterface)(nil).Text))
}
